@mixin blur($pixels) {
	-webkit-filter:	blur(#{$pixels}px);
	-moz-filter:	blur(#{$pixels}px);
	-o-filter:		blur(#{$pixels}px);
	-ms-filter:		blur(#{$pixels}px);
	filter:			blur(#{$pixels}px);
}

// Font Size
@mixin font-size ($size) {
	font-size: #{$size}px;
	font-size: rem-calc($size)
}

// Transition

@mixin transition ($property: all, $duration: 0.25s, $ease: ease) {
	-webkit-transition: $property $duration $ease;
	-moz-transition:	$property $duration $ease;
	-ms-transition:		$property $duration $ease;
	-o-transition:		$property $duration $ease;
	transition:			$property $duration $ease;
}

// vertical-align
// Vertically aligning elements is challenging even with CSS, 
// but this mixin gives you a nice simple solution: 
@mixin vertical-align {
    position: relative;
	top: 50%;
	-webkit-transform: translateY(-50%);
	-ms-transform: translateY(-50%);
	transform: translateY(-50%);
}

// flexbox
// Sass mixins are great for handling settings like flexbox, 
// that have had several different syntaxes published at different times.
@mixin flexbox
 {
 display:-webkit-box; // old
 display:-moz-box; // old
 display:-ms-flexbox; // ie
 display:-webkit-flex; // new
 display:flex; // new
 }

// flex
// Having set up a mixin to set the display property to flex, 
// you’ll also need a mixin to set your flex value:
@mixin flex($values) {
     -webkit-box-flex: $values;
 -moz-box-flex:  $values;
 -ms-flex:  $values;
 -webkit-flex:  $values;
 flex:  $values;
 }

// flex-order
// And another to set the order property:
@mixin flex-order($order){
     -webkit-box-ordinal-group: $order; // old
 -moz-box-ordinal-group: $order; // old
 -ms-flex-order: $order; // ie
 -webkit-order: $order; // new
 order: $order; // new
 }

// flex-direction
// Mixins also allow us to use Sass’ @if, 
// @else if, and @else statements to combine 
// what could have been two separate mixins into one:
@mixin flex-direction($direction) {
	@if $direction == column {
		-webkit-flex-direction:vertical;
		-moz-flex-direction:vertical;
		-ms-flex-direction:column;
		-webkit-flex-direction:column;
		flex-direction:column;
	} @else {
		-webkit-flex-direction:horizontal;
		-moz-flex-direction:horizontal;
		-ms-flex-direction:row;
		-webkit-flex-direction:row;
		flex-direction:row;
	}
}

// gradient
// We should always try to keep our code simple, 
// but when necessary mixins can be huge. 
// This mixin allows us to create different 
// kinds of gradient for all browsers, using just three values:
@mixin gradient($start-color, $end-color, $orientation)
 {
 background: $start-color;
 @if $orientation == vertical
 {
 // vertical
 background: -moz-linear-gradient(top,  $start-color 0%, $end-color 100%);
 background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$start-color), color-stop(100%,$end-color));
 background: -webkit-linear-gradient(top,  $start-color 0%,$end-color 100%);
 background: -o-linear-gradient(top,  $start-color 0%,$end-color 100%);
 background: -ms-linear-gradient(top,  $start-color 0%,$end-color 100%);
 background: linear-gradient(to bottom,  $start-color 0%,$end-color 100%);
 filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=0 );
 }
 @else if $orientation == horizontal
 {
 // horizontal
 background: -moz-linear-gradient(left,  $start-color 0%, $end-color 100%);
 background: -webkit-gradient(linear, left top, right top, color-stop(0%,$start-color), color-stop(100%,$end-color));
 background: -webkit-linear-gradient(left,  $start-color 0%,$end-color 100%);
 background: -o-linear-gradient(left,  $start-color 0%,$end-color 100%);
 background: -ms-linear-gradient(left,  $start-color 0%,$end-color 100%);
 background: linear-gradient(to right,  $start-color 0%,$end-color 100%);
 filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=1 );
 }
 @else
 {
 // radial
 background: -moz-radial-gradient(center, ellipse cover,  $start-color 0%, $end-color 100%);
 background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%,$start-color), color-stop(100%,$end-color));
 background: -webkit-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
 background: -o-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
 background: -ms-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
 background: radial-gradient(ellipse at center,  $start-color 0%,$end-color 100%);
 filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=1 );
 }
 }