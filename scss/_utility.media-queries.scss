/*
	Responsive Mixins
	@respond-to
	and
	@responsive-property

	Author:		Elliott Matthew Greaves
	license:	MIT
*/


/*
	Media Query width break points
	Along with the array variables, these variables have 
	been pre-defined in the foundation framework _settings.scss 
	under section d) media-queries.

	If you wish to port this mixin outside of foundation, 
	you will need to uncomment the media query values below.
	---
	WARNING: If you Uncomment then modifying these variable
	whilst including foundations SASS files in this build,
	you may experience inconstistancys with your 
	responsive foundation grid system AND these media query mixins.	
*/

//$small-breakpoint:  em-calc(640);
//$medium-breakpoint: em-calc(1024);
//$large-breakpoint:  em-calc(1440);
//$xlarge-breakpoint: em-calc(1920);

//$small-range:   (0, $small-breakpoint);
//$medium-range:  ($small-breakpoint  + em-calc(1), $medium-breakpoint);
//$large-range:   ($medium-breakpoint + em-calc(1), $large-breakpoint);
//$xlarge-range:  ($large-breakpoint  + em-calc(1), $xlarge-breakpoint);
//$xxlarge-range: ($xlarge-breakpoint + em-calc(1), em-calc(99999999));

//$screen: "only screen";

//$portrait: "#{$screen} and (orientation: portrait)";

//$small-up: $screen;
//$small-only: "#{$screen} and (max-width: #{upper-bound($small-range)})";

//$medium-up: "#{$screen} and (min-width:#{lower-bound($medium-range)})";
//$medium-only: "#{$screen} and (min-width:#{lower-bound($medium-range)}) and (max-width:#{upper-bound($medium-range)})";

//$large-up: "#{$screen} and (min-width:#{lower-bound($large-range)})";
//$large-only: "#{$screen} and (min-width:#{lower-bound($large-range)}) and (max-width:#{upper-bound($large-range)})";

//$xlarge-up: "#{$screen} and (min-width:#{lower-bound($xlarge-range)})";
//$xlarge-only: "#{$screen} and (min-width:#{lower-bound($xlarge-range)}) and (max-width:#{upper-bound($xlarge-range)})";

//$xxlarge-up: "#{$screen} and (min-width:#{lower-bound($xxlarge-range)})";
//$xxlarge-only: "#{$screen} and (min-width:#{lower-bound($xxlarge-range)}) and (max-width:#{upper-bound($xxlarge-range)})";

//$retina: (
//	"#{$screen} and (-webkit-min-device-pixel-ratio: 2)",
//	"#{$screen} and (min--moz-device-pixel-ratio: 2)",
//	"#{$screen} and (-o-min-device-pixel-ratio: 2/1)",
//	"#{$screen} and (min-resolution: 192dpi)",
//	"#{$screen} and (min-resolution: 2dppx)"
//);

/*
Associative array containing all the media query combinations
---
Feel free to add more :D
 */
$responsive-list:
	"screen"		$screen,
	//"portrait"		$portrait,
	small-up		$small-up,
    small-only		$small-only,
    "medium-up"		$medium-up,
    "medium-only"	$medium-only,
    "large-up"		$large-up,
	"large-only"	$large-only,
    "xlarge-up"		$xlarge-up,
	"xlarge-only"	$xlarge-only;
    //"xxlarge-up"	$xxlarge-up,
	//"xxlarge-only"	$xxlarge-only,
    //"retina"		$retina;

@mixin respond-to ($media, $specific-width: false) {
	@each $media_type in $responsive-list {
		@if $media == #{nth($media_type, 1)} {
			@media #{nth($media_type, 2)} {
				@content;
			}
		}
		@if $specific-width == true {
			@media only screen and (max-width: #{$media}px) {
				@content;
			}
		}
	}
}

@mixin responsive_property ($selector) {
	.#{$selector} {
		@content;
	}
	@each $media_type in $responsive-list {
		@media #{nth($media_type, 2)} {
			.#{$selector}-#{nth($media_type,1)} {
				@content;
			}
		}
	}
}